---
- name: install system packages
  yum: name={{ item }} state=present
  with_items:
    - java-1.8.0-openjdk-headless
    - tar

- name: download Jolokia
  get_url:
    url: https://search.maven.org/remotecontent?filepath=org/jolokia/jolokia-jvm/1.6.1/jolokia-jvm-1.6.1-agent.jar
    dest: /opt/jolokia-jvm-1.6.1-agent.jar
    sha256sum: cc0883217bfd96bb542b7a27c6ea14dda99d604d91dc700f9bb980f5d2a0e359
    mode: 0755

- name: download ZooKeeper and Kafka
  get_url: url=https://s3-us-west-2.amazonaws.com/moz-packages/{{ item.path }}
           dest=/var/tmp/{{ item.path }}
           sha256sum={{ item.sha256 }}
  with_items:
    - { path: zookeeper-3.4.11.tar.gz, sha256: f6bd68a1c8f7c13ea4c2c99f13082d0d71ac464ffaf3bf7a365879ab6ad10e84 }
    - { path: kafka_2.11-1.1.0.tgz, sha256: 124861011a849b1cf63d2fccee5e79303cea32987f37890d1848948edfcc18ca }

- name: uncompress ZooKeeper and Kafka
  unarchive: src=/var/tmp/{{ item.src }}
             dest=/opt
             copy=no
             creates={{ item.creates }}
             owner=root
             group=root
  with_items:
    - { src: zookeeper-3.4.11.tar.gz, creates: zookeeper-3.4.11 }
    - { src: kafka_2.11-1.1.0.tgz, creates: kafka_2.11-1.1.0 }

- user: name=zookeeper
        uid=2321
        shell=/bin/bash
        createhome=no
        home=/var/run/zookeeper
  when: inventory_hostname not in ignore_zookeeper_user | default([])

- name: create config directories for Kafka and ZooKeeper
  file: path={{ item }}
        state=directory
        owner=root
        group=root
        mode=0755
  with_items:
    - /etc/kafka
    - /etc/zookeeper

- name: create directories for Kafka
  file: path={{ item }}
        state=directory
        owner=zookeeper
        group=zookeeper
        mode=0755
  with_items:
    - /var/lib/kafka
    - /var/lib/zookeeper
    - /var/log/kafka
    - /var/log/zookeeper

- name: create Kafka symlink
  file: src=/opt/kafka_2.11-1.1.0
        path=/opt/kafka
        state=link

- name: create ZooKeeper symlink
  file: src=/opt/zookeeper-3.4.11
        path=/opt/zookeeper
        state=link

- name: install ZooKeeper config
  template: src=zoo.cfg.j2
            dest=/etc/zookeeper/zoo.cfg
            owner=root
            group=root
            mode=0644

- name: install config files
  copy: src={{ item.src }}
        dest=/etc/{{ item.dest }}
        owner=root
        group=root
        mode=0644
  with_items:
    - { src: kafka-log4j.properties, dest: kafka/log4j.properties }
    - { src: zookeeper-log4j.properties, dest: zookeeper/log4j.properties }

- name: install Kafka config
  template: src=kafka-server.properties.j2
            dest=/etc/kafka/server.properties
            owner=root
            group=root
            mode=0644

- name: see if ZooKeeper ID set
  stat: path=/var/lib/zookeeper/myid
  register: zk_myid

- name: set ZooKeeper ID
  copy: dest=/var/lib/zookeeper/myid
        content={{ zk_servers[inventory_hostname] }}
        owner=root
        group=root
        mode=0644
  when: zk_myid.stat.exists == False and inventory_hostname in zk_servers

- name: install systemd service files for kafka and zookeeper (server only)
  copy: src={{ item }}.service
        dest=/etc/systemd/system/{{ item }}.service
        owner=root
        group=root
        mode=0644
  notify: systemd daemon reload
  with_items:
    - kafka
    - zookeeper
  when: is_testing is not defined

- name: install Kafka log cleanup systemd unit files
  copy: src={{ item }}
        dest=/etc/systemd/system/{{ item }}
        owner=root
        group=root
        mode=0644
  notify: systemd daemon reload
  when: is_testing is not defined
  with_items:
    - kafka-logs-cleanup.service
    - kafka-logs-cleanup.timer

- name: enable Kafka log cleanup systemd timer unit
  service: name=kafka-logs-cleanup.timer
           enabled=yes
  when: is_testing is not defined

# We DON'T set state=started because starting kafka and zookeeper can be
# dangerous since it may introduce nodes into a cluster at an unwanted
# time.
- name: ensure kafka and zookeeper start at boot (server only)
  service: name={{ item }}.service
           enabled=yes
  with_items:
    - kafka
    - zookeeper
  when: is_testing is not defined
