#!/usr/bin/python3
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# There is a race condition between starting Zookeeper and Kafka at
# the same time. This script exists to delay the start of Kafka until
# Zookeeper is ready.

from __future__ import absolute_import, unicode_literals

import os
import socket
import sys
import time


def send_zk_command(host, port, command):
    """Send a ZooKeeper 4 letter command to a host:port."""
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.settimeout(5.0)
    s.connect((host, int(port)))
    result = []
    try:
        s.sendall(command)
        s.shutdown(socket.SHUT_WR)

        while True:
            data = s.recv(4096)
            if not data:
                break
            result.append(data)
    finally:
        s.close()

    return b''.join(result)


def try_zookeeper_connect(host):
    """Attempt to connect to Zookeeper on the given host.
    """
    try:
        return send_zk_command(host, 2181, b'stat') is not None
    except Exception:
        return False

timeout_s = 180.0
hostnames = ['hgssh', 'hgweb0', 'hgweb1']

t_start = time.time()
while not all(
    try_zookeeper_connect(host)
    for host in hostnames
):

    if time.time() - t_start > timeout_s:
        sys.exit('timeout reached waiting for Zookeeper')

    time.sleep(0.1)

env = dict(os.environ)
env.update({
    'KAFKA_GC_LOG_OPTS': '-Xloggc:/var/log/kafka/server-gc.log -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=100M',
    'KAFKA_LOG4J_OPTS': '-Dlog4j.configuration=file:/etc/kafka/log4j.properties',
    'KAFKA_HEAP_OPTS': '-Xmx512m',
    'KAFKA_OPTS': '-javaagent:/opt/jolokia-jvm-1.6.1-agent.jar=host=localhost,port=8778',
    'LOG_DIR': '/var/log/kafka',
})

# -daemon here causes same Java process to be executed with "nohup"
os.execle('/opt/kafka/bin/kafka-server-start.sh', '-daemon', '/etc/kafka/server.properties', env)
