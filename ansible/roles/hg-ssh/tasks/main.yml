---
- include: ../../../tasks/systemd-mail-unit-output.yml
  when: is_testing is not defined

- name: Install packages required to run a Mercurial server
  yum:
    state: present
    name:
      - sudo
      - tar
      - yum-plugin-versionlock

- name: install global ssh config
  copy: src=ssh_config
        dest=/etc/ssh/ssh_config
        owner=root
        group=root
        mode=0640

- name: Create groups for hg services
  group: name={{ item.name }} gid={{ item.gid }}
  with_items:
    - { name: 'hg-aggregate', gid: 5601 }
    - { name: 'hg-notifier', gid: 5603 }

- name: create users for hg services
  user: name={{ item.name }}
        group={{ item.name }}
        uid={{ item.uid }}
  with_items:
    - { name: 'hg-aggregate', uid: 5601 }
    - { name: 'hg-notifier', uid: 5603 }

- name: install hg-master.target systemd unit
  copy: src=hg-master.target
        dest=/etc/systemd/system/hg-master.target
        owner=root
        group=root
        mode=0644
  notify: systemd daemon reload
  when: is_testing is not defined

- name: enable hg-master.target systemd unit
  service: name=hg-master.target
           enabled=yes
  when: is_testing is not defined

- name: hg user ssh config is prepared
  file: path=/home/hg/.ssh state=directory mode=0775 owner=hg group=hg

- name: install pash configuration file
  template: src=pash.json.j2
            dest=/etc/mercurial/pash.json
            owner=root
            group=root
            mode=0644

- name: replication SSH key is present
  command: /usr/bin/ssh-keygen -b 4096 -f /etc/mercurial/mirror -t rsa -N '' creates=/etc/mercurial/mirror

- name: capture content of replication SSH key
  slurp: src=/etc/mercurial/mirror.pub
  register: mirror_ssh_key_public

- name: ensure proper permissions on replication key
  file: path={{ item }} owner=hg group=hg
  with_items:
    - /etc/mercurial/mirror
    - /etc/mercurial/mirror.pub

- name: hg user has replication key configured in authorized_keys
  copy: dest=/home/hg/.ssh/authorized_keys
        content="{{ mirror_ssh_key_public.content | b64decode }}"
        owner=hg
        group=hg
        mode=0640

- name: known hosts file for mirrors is populated
  template: src=known_hosts.j2
            dest=/etc/mercurial/known_hosts
            owner=hg
            group=hg
            mode=0660

- name: list of mirrors file is populated
  template: src=mirrors.j2
            dest=/etc/mercurial/mirrors
            owner=root
            group=root
            mode=0644

- name: User repository directories are present
  file: path=/repo/hg/mozilla/users state=directory mode=0775 owner=hg group=scm_level_1

- name: create virtualenv for tools
  include: ../../../tasks/virtualenv3.yml
           python=/usr/bin/python3.6
           venv=/var/hg/venv_tools
           requirements=../roles/hg-ssh/files/requirements-tools.txt

- name: create virtualenv for bundle generation
  include: ../../../tasks/virtualenv3.yml
           python=/usr/bin/python3.6
           venv=/var/hg/venv_bundles
           requirements=../roles/hg-ssh/files/requirements-bundles.txt

# Hooks are referenced in various hgrc files via "python:mozhghooks.*".
# This means they are imported as Python modules from the "mozhghooks"
# package. We create a .pth file telling the virtualenv that
# all hooks are located in the version-control-tools checkout.
#
# The vcsreplicator Python package contains support code for managing
# replication. Also add it to the virtualenv.
- name: add packages to Python 3 virtualenvs
  copy: dest=/var/hg/{{ item.venv }}/lib64/python3.6/site-packages/{{ item.pth }}.pth
        content=/var/hg/version-control-tools/{{ item.path }}
        owner=root
        group=root
        mode=0644
  with_items:
    - { venv: venv_bundles, path: hghooks, pth: mozhghooks }
    - { venv: venv_pash, path: hghooks, pth: mozhghooks }
    - { venv: venv_tools, path: hghooks, pth: mozhghooks }
    - { venv: venv_bundles, path: pylib/mozhg, pth: mozhg }
    - { venv: venv_pash, path: pylib/mozhg, pth: mozhg }
    - { venv: venv_tools, path: pylib/mozhg, pth: mozhg }
    - { venv: venv_bundles, path: pylib/vcsreplicator, pth: vcsreplicator }
    - { venv: venv_pash, path: pylib/vcsreplicator, pth: vcsreplicator }
    - { venv: venv_tools, path: pylib/vcsreplicator, pth: vcsreplicator }
    - { venv: venv_bundles, path: pylib/mozautomation, pth: mozautomation }
    - { venv: venv_pash, path: pylib/mozautomation, pth: mozautomation }
    - { venv: venv_tools, path: pylib/mozautomation, pth: mozautomation }
    - { venv: venv_pash, path: hgserver/hgmolib, pth: hgmolib }
    - { venv: venv_tools, path: hgserver/hgmolib, pth: hgmolib }

- name: determine if v-c-t clone is present
  stat: path=/var/hg/version-control-tools/.hg
  register: vct_clone

- name: create v-c-t clone (server only)
  command: /var/hg/venv_tools/bin/hg --config extensions.replicateowner=! --config extensions.vcsreplicator=! --config extensions.readonly=! clone /repo/hg/mozilla/hgcustom/version-control-tools /var/hg/version-control-tools
  when: is_testing is not defined and vct_clone.stat.exists == False

- name: pull version-control-tools repo (server only)
  command: /var/hg/venv_tools/bin/hg --config extensions.replicateowner=! --config extensions.vcsreplicator=! --config extensions.readonly=! --config extensions.mozhooks=! -R /var/hg/version-control-tools pull /repo/hg/mozilla/hgcustom/version-control-tools
  when: is_testing is not defined

- name: update version-control-tools repo (server only)
  command: /var/hg/venv_tools/bin/hg -R /var/hg/version-control-tools up -r {{ lookup('file', '../../../../.vctnode') }}
  when: is_testing is not defined

- name: delete ignored files from version-control-tools repo
  command: /var/hg/venv_tools/bin/hg --config extensions.purge= -R /var/hg/version-control-tools purge --all
  when: is_testing is not defined

- name: rsync version-control-tools repo (Docker only)
  command: /usr/bin/rsync -rlpt --chmod=Dg+s,ugo+r --delete-after /vct/ /var/hg/version-control-tools/
  when: is_testing is defined

- name: install vcsreplicator into tools virtualenv
  command: /var/hg/venv_tools/bin/pip install --upgrade --no-deps --force-reinstall /var/hg/version-control-tools/pylib/vcsreplicator

- name: install vcsreplicator into bundles virtualenv
  command: /var/hg/venv_bundles/bin/pip install --upgrade --no-deps --force-reinstall /var/hg/version-control-tools/pylib/vcsreplicator

- name: install hgmolib into bundles virtualenv
  command: /var/hg/venv_bundles/bin/pip install --upgrade --no-deps --force-reinstall /var/hg/version-control-tools/hgserver/hgmolib

- name: install rsyslog policy for hg
  copy: src=rsyslog-hg.conf
        dest=/etc/rsyslog.d/hg-master.conf
         owner=root
         group=root
         mode=0644
  notify: restart rsyslogd

- name: install logrotate config for hg
  copy: src=logrotate-hg.conf
        dest=/etc/logrotate.d/hg-master
        owner=root
        group=root
        mode=0644

- name: global Mercurial configs are in place
  template: src={{ item }}.j2
            dest=/etc/mercurial/{{ item }}
            mode=0664
            owner=root
            group=root
  with_items:
    - hgrc
    - notifications.ini
    - pushdataaggregator.ini
    - pushdataaggregator-pending.ini

- name: install `pushdataaggregator_groups` file
  copy:
    src: pushdataaggregator_groups
    dest: /repo/hg/pushdataaggregator_groups
    owner: root
    group: root
    mode: 0644

- name: ensure bundles directory exists
  file: path=/repo/hg/bundles
        state=directory
        owner=hg
        group=hg
        mode=0775

- name: create directory for bootstrap logs
  file: path=/var/log/vcsrbootstrap
        state=directory
        owner=hg
        group=hg
        mode=0775

- name: write list of repositories to generate bundles for
  copy: src=bundle-repos
        dest=/repo/hg/bundles/repos
        owner=hg
        group=hg
        mode=0644

- name: install repo unify config files
  copy: src={{ item }}
        dest=/etc/mercurial/{{ item }}
        owner=root
        group=root
        mode=0644
  with_items:
    - unify-mozilla-unified.ini
    - unify-comm-unified.ini

- name: sysconfig file for unify repo daemon
  copy: src=sysconfig-unifyrepo
        dest=/etc/sysconfig/unifyrepo
        owner=root
        group=root
        mode=0644

# Ideally, we would have separate override files for each service. But
# it doesn't appear systemd allows there to be a generic e.g.
# mail-unit-output@.service and an instance e.g.
# mail-unit-output@hg-bundle-generate.service.d

- name: create directory mail-unit-output override file
  file: path=/etc/systemd/system/mail-unit-output@.service.d
        state=directory
        owner=root
        group=root
        mode=0755

- name: install mail-unit-output override
  copy: src=mail-unit-output-override.conf
        dest=/etc/systemd/system/mail-unit-output@.service.d/override.conf
        owner=root
        group=root
        mode=0644
  notify: systemd daemon reload
  when: is_testing is not defined

- name: install systemd unit files
  copy: src={{ item }}
        dest=/etc/systemd/system/{{ item }}
        owner=root
        group=root
        mode=0644
  notify: systemd daemon reload
  when: is_testing is not defined
  with_items:
    - hg-bundle-generate.service
    - hg-bundle-generate.timer
    - hg-kafka-heartbeat.service
    - hg-kafka-heartbeat.timer
    - pulsenotifier.service
    - pushdataaggregator.service
    - pushdataaggregator-pending.service
    - snsnotifier.service
    - unifyrepo.service
    - hg-master-monitor.service
    - hg-master-monitor.timer
    - try-replicatesync.service
    - try-replicatesync.timer

- name: systemd services are enabled (server only)
  service: name={{ item }}
           enabled=yes
  when: is_testing is not defined
  with_items:
    - hg-bundle-generate.timer
    - hg-kafka-heartbeat.timer
    - pulsenotifier.service
    - pushdataaggregator.service
    - pushdataaggregator-pending.service
    - snsnotifier.service
    - unifyrepo.service
    - hg-master-monitor.timer
    - try-replicatesync.timer

- name: ensure hg-master-monitor.timer is started (server only)
  service: name=hg-master-monitor.timer
           state=started
  when: is_testing is not defined

- name: restart all services specific to master server (server only)
  service: name=hg-master.target
           state=restarted
  ignore_errors: True
  when: is_testing is not defined

- name: install cinnabarclone
  include: ../../../tasks/cinnabarclone.yml
